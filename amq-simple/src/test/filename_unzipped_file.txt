Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions



 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,1561Go through this article on how to use a Reader
I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java
In Java 7
new String(Files.readAllBytes(...)) or Files.readAllLines(...)
In Java 8
Files.lines(..).forEach(...)
shareimprove this answer
edited Mar 23 '14 at 23:15
answered Jan 17 '11 at 18:31
Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment
up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):
BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();
        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:
/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00
Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

===========================================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


==================================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


=================================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


===================================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

========================================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


==============================

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }

The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461

Stack Exchange sign up log in tour help  stack overflow careers  


Stack Overflow
Questions
 
Tags
 
Users
 
Badges
 
Unanswered
 
Ask Question
Take the 2-minute tour × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
Best way to read a text file


up vote
309
down vote
favorite
102
It seems there are a few different ways to read and write data using files.

I am trying to read ASCII data from a file. What are the differences so that I can decide what the best way is?

java file-io
shareimprove this question
edited Jul 19 '14 at 15:59

Peter Mortensen
8,156105691	
asked Jan 17 '11 at 18:29

Tim the Enchanter
1,7264916
11	 	
I also disagree with closing as "not constructive". Fortunately, this could well be closed as duplicate. Good answers e.g. in How to create a String from the contents of a file?, What is simplest way to read a file into String?, What are the simplest classes for reading files? –  Jonik Dec 29 '13 at 13:35
  	 	
Without loops: {{{ Scanner sc = new Scanner(file, "UTF-8"); sc.useDelimiter("$^"); // regex matching nothing String text = sc.next(); sc.close(); }}} –  Aivar Apr 28 '14 at 18:58 
  	 	
it's so interesting that there is nothing like "read()" in python , to read the whole file to a string –  kommradHomer Oct 21 '14 at 8:44
1	 	
I'm pretty sure this could be closed as "too broad". –  QPaysTaxes Jan 8 at 19:24
  	 	
This is the simplest way to do this: mkyong.com/java/… –  dellasavia Mar 17 at 13:47 
add a comment
12 Answers
activeoldestvotes
up vote
172
down vote
accepted
ASCII is a TEXT file so you would use Readers for reading. Java also supports reading from a binary file using InputStreams. If the files being read are huge then you would want to use a BufferedReader on top of a FileReader to improve read performance.

Go through this article on how to use a Reader

I'd also recommend you download and read this wonderful (yet free) book called Thinking In Java

In Java 7

new String(Files.readAllBytes(...)) or Files.readAllLines(...)

In Java 8

Files.lines(..).forEach(...)

shareimprove this answer
edited Mar 23 '14 at 23:15

answered Jan 17 '11 at 18:31

Pangea
40.1k1597171
3	 	
Picking a Reader really depends on what you need the content of the file for. If the file is small(ish) and you need it all, it's faster (benchmarked by us: 1.8-2x) to just use a FileReader and read everything (or at least large enough chunks). If you're processing it line by line then go for the BufferedReader. –  Vlad Aug 27 '13 at 13:45
  	 	
I guess @Vlad is referring to the method of reading entire file into memory explained here java2s.com/Tutorial/Java/0180__File/… –  Dimitry K Jun 11 '14 at 13:28
  	 	
Will the line order be preserved when using "Files.lines(..).forEach(...)". My understanding is that the order will be arbitrary after this operation. –  DaSh Sep 14 '14 at 18:49
  	 	
@DaSh not sure. Either read the javadoc or try it out. –  Pangea Sep 15 '14 at 12:02
1	 	
Files.lines(…).forEach(…) does not preserve order of lines but is executed in parallel, @Dash. If the order is important, you can use Files.lines(…).forEachOrdered(…), which should preserve the order (did not verify though). –  Palec Feb 15 at 22:45
add a comment

up vote
284
down vote
My favorite way to read a small file is to use a BufferedReader and a StringBuilder. It is very simple and to the point (though not particularly effective, but good enough for most cases):

    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    } finally {
        br.close();
    }
Some has pointed out that after Java 7 you should use auto close features:

    try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }
When I read strings like this, I usually want to do some string handling per line anyways, so then I go for this implementation.

Though if I want to actually just read a file into a String, I always use Apache Commons IO with the class IOUtils.toString() method. You can have a look at the source here:

http://www.docjar.com/html/api/org/apache/commons/io/IOUtils.java.html

    FileInputStream inputStream = new FileInputStream("foo.txt");
    try {
        String everything = IOUtils.toString(inputStream);
    } finally {
        inputStream.close();
    }
And even simpler with Java 7:

    try(FileInputStream inputStream = new FileInputStream("foo.txt")) {
        Session IOUtils;
        String everything = IOUtils.toString(inputStream);
    }
shareimprove this answer
edited Jul 19 '14 at 16:03

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:42

Knubo
3,76331019
3	 	
I've made a small adjustment to stop adding a newline ( \n ) if the last line is reached. code while (line != null) { sb.append(line); line = br.readLine(); // Only add new line when curline is NOT the last line.. if(line != null) { sb.append("\n"); } }code –  Ramon Fincken Apr 16 '13 at 11:07
1	 	
I feel it is better to explicitly give the encoding option and use the FileInputStream rather than directly the FileReader ? See this question too stackoverflow.com/questions/696626/… `reader = new InputStreamReader(new FileInputStream("<filePath>", "UTF-8"); –  Alex Punnen Jun 4 '13 at 6:43 
1	 	
Similar to Apache Common IO IOUtils#toString() is sun.misc.IOUtils#readFully(), which is included in the Sun/Oracle JREs. –  gb96 Jul 5 '13 at 0:55
2	 	
For performance always call sb.append('\n') in preference to sb.append("\n") as a char is appended to the StringBuilder faster than a String –  gb96 Jul 5 '13 at 0:58
2	 	
there is no need to use readers directly and also no need for ioutils. java7 has built in methods to read an entire file/all lines: See docs.oracle.com/javase/7/docs/api/java/nio/file/… and docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:48 
show 5 more comments
up vote
51
down vote
The easiest way is to use the Scanner class in Java and the FileReader object. Simple example:

Scanner in = new Scanner(new FileReader("filename.txt"));
Scanner has several methods for reading in strings, numbers, etc... You can look for more information on this on the Java documentation page.

shareimprove this answer
edited Jul 19 '14 at 16:00

Peter Mortensen
8,156105691	
answered Jan 17 '11 at 18:35

Jesus Ramos
16.4k53163
8	 	
while (in.hasNext()) { System.out.println (in.next()); } –  gnB Apr 18 '14 at 20:15
  	 	
not so efficient like BufferedReader –  Hissain Aug 13 '14 at 3:54
2	 	
@Hissain But much easier to use than BufferedReader –  Jesus Ramos Aug 13 '14 at 4:38
add a comment
up vote
25
down vote
Here's another way to do it without using external libraries:

import java.io.File;
import java.io.FileReader;
import java.io.IOException;


public String readFile(String filename)
{
   String content = null;
   File file = new File(filename); //for ex foo.txt
   try {
       FileReader reader = new FileReader(file);
       char[] chars = new char[(int) file.length()];
       reader.read(chars);
       content = new String(chars);
       reader.close();
   } catch (IOException e) {
       e.printStackTrace();
   }
   return content;
}
shareimprove this answer
edited Aug 11 '13 at 17:15

lama12345
533159	
answered May 22 '12 at 21:02

Grimy
27532
24	 	
Close the reader in finally –  PhiLho May 28 '13 at 13:50
5	 	
or use "try-with-resources" try(FileReader reader = new FileReader(file)) –  Hernán Eche Jan 16 '14 at 13:04
1	 	
I noticed the file.length(), How well does this work with utf-16 files? –  Wayne Jan 30 '14 at 3:02
  	 	
This technique assumes that read() fills the buffer; that the number of chars equals the number of bytes; that the number of bytes fits into memory; and that the number of bytes fits into an integer. -1 –  EJP Aug 28 '14 at 10:01
add a comment
up vote
12
down vote
The methods within org.apache.commons.io.FileUtils may also be very handy, e.g.:

/**
 * Reads the contents of a file line by line to a List
 * of Strings using the default encoding for the VM.
 */
static List readLines(File file)
shareimprove this answer
edited Feb 15 at 12:00

Palec
3,24131235	
answered Jan 17 '11 at 18:46

Claude
27519
  	 	
Or if you prefer Guava (a more modern, actively maintained library), it has similar utilities in its Files class. Simple examples in this answer. –  Jonik Dec 29 '13 at 13:26 
  	 	
or you simply use the built in method to get all lines: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:50 
add a comment
up vote
6
down vote
What do you want to do with the text? Is the file small enough to fit into memory? I would try to find the simplest way to handle the file for your needs. The FileUtils library is very handle for this.

for(String line: FileUtils.readLines("my-text-file"))
    System.out.println(line);
shareimprove this answer
answered Jan 17 '11 at 22:33

Peter Lawrey
262k26259509
  	 	
Where did you get FileUtils? –  toc777 Jul 20 '11 at 13:02
2	 	
it's also built into java7: docs.oracle.com/javase/7/docs/api/java/nio/file/… –  kritzikratzi Mar 23 '14 at 18:51
  	 	
@PeterLawrey probably means org.apache.commons.io.FileUtils. Google link may change content over time, as the most widespread meaning shifts, but this matches his query and looks correct. –  Palec Feb 15 at 11:42
1	 	
Unfortunately, nowadays there is no readLines(String) and readLines(File) is deprecated in favor of readLines(File, Charset). The encoding can be supplied also as a string. –  Palec Feb 15 at 11:46
  	 	
A marginally older answer suggesting the same method –  Palec Feb 15 at 11:56 
add a comment
up vote
3
down vote
I don't see it mentioned yet in the other answers so far. But if "Best" means speed, then the new Java I/O (NIO) might provide the fastest preformance, but not always the easiest to figure out for someone learning.

http://download.oracle.com/javase/tutorial/essential/io/file.html

shareimprove this answer
answered Jan 17 '11 at 19:45

jzd
18k72960
add a comment
up vote
3
down vote
Probably not as fast as with buffered IO but quite terse:

    String content;
    try (Scanner scanner = new Scanner(textFile).useDelimiter("\\Z")) {
        content = scanner.next();
    }
The \Z pattern tells the Scanner that the delimiter is EOF

shareimprove this answer
answered Dec 31 '14 at 13:00

David Soroko
1,70069
  	 	
A very related, already existing answer is by Jesus Ramos. –  Palec Jan 2 at 8:59
add a comment
up vote
3
down vote
Here is a simple solution:

String content;

content = new String(Files.readAllBytes(Paths.get("sample.txt")));
shareimprove this answer
answered Jan 29 at 16:24

Nery Jr
1,337515
1	 	
This is mentioned in the accepted answer. –  Palec Jan 30 at 18:06
add a comment
up vote
0
down vote
The most simple way to read data from a file in java is making use of File class to read the file and Scanner class to read the content of the file.

   public static void main(String args[])throws Exception
    {
       File f = new File("input.txt");
       takeInputIn2DArray(f);
    }


public static void takeInputIn2DArray(File f) throws Exception
{
        Scanner s = new Scanner(f);
        int a[][] = new int[20][20];
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<20;j++)
            {
                a[i][j]=s.nextInt();
            }
        }
}
PS : Don't forget to import java.util.*; for Scanner to work.

shareimprove this answer
answered Feb 2 at 14:48

anadir47
12
add a comment
up vote
0
down vote
For JSF-based Maven web apps, just use ClassLoader and the Resources folder:

Put any file you want to read in the Resources folder.
Use the code below to read it:

String metadata = null; FileInputStream inputStream; try {

ClassLoader loader = Thread.currentThread().getContextClassLoader();
inputStream = (FileInputStream) loader.getResourceAsStream("/metadata.json");           
metadata = IOUtils.toString(inputStream);
inputStream.close();
} catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return metadata;

You can do the same for .properties files, xsd schemas, etc.

share
answered 52 secs ago

fuzzyanalysis
1,10011428
add a comment
up vote
-2
down vote
This code I programmed is much faster for very large files:

public String readDoc(File f) {
    String text = "";
    int read, N = 1024 * 1024;
    char[] buffer = new char[N];

    try {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        while(true) {
            read = br.read(buffer, 0, N);
            text += new String(buffer, 0, read);

            if(read < N) {
                break;
            }
        }
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    return text;
}
shareimprove this answer
edited Oct 20 '12 at 17:29

MikkoP
92342352	
answered May 21 '12 at 23:19

Juan Carlos Kuri Pinto
51348
3	 	
Much faster, I doubt it, if you use simple string concatenation instead of a StringBuilder... –  PhiLho May 28 '13 at 13:41
3	 	
I think the main speed gain is from reading in 1MB (1024 * 1024) blocks. However you could do the same simply by passing 1024 * 1024 as second arg to BufferedReader constructor. –  gb96 Jul 5 '13 at 0:50
  	 	
i don't believe this is tested at all. using += in this way gives you quadratic (!) complexity for a task that should be linear complexity. this will start to crawl for files over a few mb. to get around this you should either keep the textblocks in a list<string> or use the aforementioned stringbuilder. –  kritzikratzi Mar 23 '14 at 18:55
2	 	
Much faster than what? It most certainly is not faster than appending to a StringBuffer. -1 –  EJP Aug 28 '14 at 10:02 
1	 	
@gb96 I thought the same about buffer sizes, but the detailed experiment in this question gave surprising results in a similar context: a 16KB buffer was consistently and noticeably faster. –  chiastic-security Sep 12 '14 at 18:14
show 1 more comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Stack Exchange
Post as a guest

Name

Email

 
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?	Browse other questions tagged java file-io or ask your own question.

asked

4 years ago

viewed

780459 times

active

today

Upcoming Events
2015 Community Moderator Election
ends Apr 21


Linked

-3 best way to read data from a file
1 How to read text files in java and access those value
-1 Get XML string from DOM
0 big txt file to String?
0 Java: Reading a file and store it's data in an ArrayList?
0 PrintWriter won't stop writing in Java, stuck in infinite loop
-2 How to Load a file with the name as a string in Java?
0 Reading in a txt file using scanner on Eclipse, what am i doing wrong. java
527 How to create a Java String from the contents of a file?
88 What is simplest way to read a file into String?
see more linked questions…
Related

1457 Read/convert an InputStream to a String
527 How to create a Java String from the contents of a file?
1170 Restore a deleted file in a Git repo
275 How do I check if a file exists in Java?
88 What is simplest way to read a file into String?
232 How to read a large text file line by line using Java?
10077 Why is processing a sorted array faster than an unsorted array?
0 Best way to read an internal file on Android?
1 Best way to read integers from a text file into an array
0 Best way to read strings of characters separated by spaces in files
Hot Network Questions

An adjective or a single word that means something is "new" and "different" at the same time
Circle on the sphere
If every element of G/H has finite order and every element of H has finite order, then every element of G has finite order
Design a non-computerized biometric door
What does Ugs. mean?
Ethics of Accepting Unneeded Merit Based Scholarships
How to disable birthday notifications
Need to play D&D on a budget, at least for now
Why is it unsafe to delete old kernels?
What are the pros and cons of buying a house just to rent it out?
Saving for a non-necessity
How weak can a propellant be and still get a rocket to space, theoretically?
How can I quantify a drawn line's straightness?
What's the most entertaining way to prove to someone that they aren't real?
How should I deal with a passenger experiencing hypoxia over the Grand Canyon?
What is the picture on the front of this edition of "The Two Towers"?
Level 1 fighter seems over powered
Growing a city (literally)
Some faces of a model don't respond to UV Mapping
Is there any point in photographing directly to black & white?
Could there be a problem with my PhD supervisor (lack of assertiveness, essentially a "yes woman")?
In the battle at wolf 359 one ship survives, which one was it and why did it survive?
KL divergence between two univariate Poisson distributions
Why is it better to use pointers in a linked list?
question feed
tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY	LIFE / ARTS	CULTURE / RECREATION	SCIENCE	OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
more (14)
Photography
Science Fiction & Fantasy
Graphic Design
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
more (7)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2015.4.10.2461


=========================
